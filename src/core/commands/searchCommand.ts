import { Markup } from "telegraf";
import type { KeyboardButton, CallbackQuery } from "telegraf/types";
import { AviasalesClient } from "../../lib/api/AviasalesClient.js";
import { Command } from "../../lib/structures/Command.js";
import type { Context } from "../../lib/types/Context.js";
import { Calendar } from "../../lib/utils/Calendar.js";

/**
 * –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π
 */
const AIRLINES = ["–ê—ç—Ä–æ—Ñ–ª–æ—Ç", "S7 Airlines", "–ü–æ–±–µ–¥–∞", "UTair", "Red Wings", "–†–æ—Å—Å–∏—è"] as const;

/**
 * –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏
 */
const POPULAR_CITIES_ARRAY = [
	["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"],
	["–ö–∞–∑–∞–Ω—å", "–°–æ—á–∏"],
	["–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"],
	["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"],
] as KeyboardButton[][];

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
 */
enum SearchStep {
	AIRLINE = "airline",
	DATE_PREFERENCE = "date_preference",
	DEPARTURE_AIRPORT = "departure_airport",
	DEPARTURE_CITY = "departure_city",
	DESTINATION_CITY = "destination_city",
	FLIGHT_PREFERENCES = "flight_preferences",
	PASSENGER_INFO = "passenger_info",
	SEARCH_RESULTS = "search_results",
	SELECT_DATES = "select_dates",
	TRIP_TYPE = "trip_type",
}

type SearchStepState = {
	[K in SearchStep]: (ctx: Context, data?: string) => Promise<void>;
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—à–∞–≥–æ–≤–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.
 */
class SearchCommand extends Command {
	private readonly aviasales = new AviasalesClient();

	private readonly stepHandlers: SearchStepState = {
		[SearchStep.DEPARTURE_CITY]: async (ctx: Context, data?: string) => {
			if (!data) return;
			await this.handleDepartureCity(ctx, data);
		},
		[SearchStep.DEPARTURE_AIRPORT]: async (ctx: Context, data?: string) => {
			if (!data) return;
			await this.handleDepartureAirport(ctx, data);
		},
		[SearchStep.TRIP_TYPE]: async (ctx: Context, data?: string) => {
			console.log("Trip type handler called with data:", data); // Debug log

			if (!data?.startsWith("trip_")) return;

			try {
				const currentSession = { ...ctx.session };
				currentSession.searchState = {
					...currentSession.searchState,
					isRoundTrip: data === "trip_roundtrip",
				};
				currentSession.state = SearchStep.DESTINATION_CITY;
				Object.assign(ctx, { session: currentSession });

				console.log("Session updated, new state:", currentSession.state); // Debug log

				// First remove the inline keyboard
				if (ctx.callbackQuery) {
					await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
				}

				// Then send the new message
				await ctx.reply("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", {
					reply_markup: {
						keyboard: POPULAR_CITIES_ARRAY,
						one_time_keyboard: true,
						resize_keyboard: true,
					},
				});
			} catch (error) {
				console.error("Error in trip type handler:", error);
				await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
			}
		},
		[SearchStep.DESTINATION_CITY]: async (ctx: Context, data?: string) => {
			if (!data) return;
			try {
				const airports = await this.aviasales.searchAirports(data);
				if (airports.length > 0) {
					const currentSession = { ...ctx.session };
					currentSession.searchState = {
						...currentSession.searchState,
						destinationCity: data,
						destinationAirport: airports[0].iata, // Use first airport by default
					};
					currentSession.state = SearchStep.AIRLINE;
					Object.assign(ctx, { session: currentSession });

					console.log("Setting up airline selection, current state:", currentSession.state); // Debug log

					// Remove old keyboard and show airline selection
					await ctx.reply("‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é:", {
						reply_markup: {
							remove_keyboard: true,
							inline_keyboard: AIRLINES.map((airline) => [Markup.button.callback(airline, `airline_${airline}`)]),
						},
					});
				} else {
					await ctx.reply("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
						reply_markup: {
							keyboard: POPULAR_CITIES_ARRAY,
							one_time_keyboard: true,
							resize_keyboard: true,
						},
					});
				}
			} catch (error) {
				console.error("Failed to search airports:", error);
				await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
			}
		},
		[SearchStep.DATE_PREFERENCE]: async (ctx: Context, data?: string) => {
			if (!data?.startsWith("date_")) return;

			const currentSession = { ...ctx.session };
			currentSession.searchState = {
				...currentSession.searchState,
				isFlexibleDates: data === "date_flexible",
			};
			currentSession.state = SearchStep.FLIGHT_PREFERENCES;
			Object.assign(ctx, { session: currentSession });

			const keyboard = Markup.inlineKeyboard([
				[Markup.button.callback("‚úÖ –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ", "flight_direct")],
				[Markup.button.callback("üîÑ –° –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏", "flight_any")],
			]);

			await ctx.reply("‚úàÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–µ—Ä–µ–ª–µ—Ç—É:", keyboard);
		},
		[SearchStep.FLIGHT_PREFERENCES]: async (ctx: Context, data?: string) => {
			if (!data?.startsWith("flight_")) return;

			const currentSession = { ...ctx.session };
			currentSession.searchState = {
				...currentSession.searchState,
				isDirect: data === "flight_direct",
			};
			currentSession.state = SearchStep.PASSENGER_INFO;
			Object.assign(ctx, { session: currentSession });

			// First remove the flight preferences keyboard
			await ctx.editMessageText(
				`‚úàÔ∏è ${data === "flight_direct" ? "–í—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã" : "–í—ã–±—Ä–∞–Ω—ã —Ä–µ–π—Å—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏"}`,
			);

			// Then show passenger selection keyboard
			await ctx.reply("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:", {
				reply_markup: {
					inline_keyboard: [
						[1, 2, 3, 4].map((num) =>
							Markup.button.callback(`${num} ${this.getPassengerWord(num)}`, `passengers_${num}`),
						),
					],
				},
			});
		},
		[SearchStep.PASSENGER_INFO]: async (ctx: Context, data?: string) => {
			if (!data?.startsWith("passengers_")) return;
			const passengers = Number.parseInt(data.replace("passengers_", ""), 10); // Added radix parameter

			const currentSession = { ...ctx.session };
			currentSession.searchState = {
				...currentSession.searchState,
				passengerCount: passengers,
			};
			currentSession.state = SearchStep.SELECT_DATES;
			Object.assign(ctx, { session: currentSession });

			await ctx.reply("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞:", Calendar.generate(new Date()));
		},
		[SearchStep.SELECT_DATES]: async (ctx: Context) => {
			await this.handleCalendarAction(ctx);
		},
		[SearchStep.SEARCH_RESULTS]: async (ctx: Context) => {
			const state = ctx.session.searchState!;
			const keyboard = Markup.inlineKeyboard([
				[Markup.button.url("üé´ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", `https://aviasales.ru/search?origin_iata=${state.departureAirport}`)],
				[Markup.button.callback("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "search_tickets")],
			]);

			await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
		},
		[SearchStep.AIRLINE]: async (_ctx: Context, _data?: string) => {
			// This is a placeholder to satisfy the type system
			// The actual airline handling is done in handleMessage
			console.log("Airline step handler called, but handling is done in handleMessage");
		},
	};

	public constructor() {
		super({
			name: "search",
			description: "–ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤",
		});
	}

	public async execute(ctx: Context): Promise<void> {
		const session = {
			data: {},
			lastActivity: new Date(),
			state: "",
		};
		Object.assign(ctx, { session });

		const searchState = {};
		const state = SearchStep.DEPARTURE_CITY;
		Object.assign(ctx.session, { searchState, state });

		await ctx.reply("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", {
			reply_markup: {
				keyboard: POPULAR_CITIES_ARRAY,
				one_time_keyboard: true,
				resize_keyboard: true,
			},
		});
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –ø–æ–∏—Å–∫–∞.
	 *
	 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
	 */
	public async handleMessage(ctx: Context): Promise<void> {
		if (!ctx.message && !ctx.callbackQuery) return;

		// Handle callback queries
		if (ctx.callbackQuery && "data" in ctx.callbackQuery) {
			const data = ctx.callbackQuery.data;
			console.log("Received callback:", data);
			console.log("Current state:", ctx.session.state);

			try {
				// Add explicit handling for flight preferences
				if (data.startsWith("flight_")) {
					const handler = this.stepHandlers[SearchStep.FLIGHT_PREFERENCES];
					await handler(ctx, data);
					await ctx.answerCbQuery();
					return;
				}

				// Handle airport selection
				if (data.startsWith("airport_")) {
					const iata = data.replace("airport_", "");
					await this.handleDepartureAirport(ctx, iata);
					await ctx.answerCbQuery();
					return;
				}

				// Handle trip type selection
				if (data.startsWith("trip_")) {
					await this.handleTripTypeSelection(ctx);
					return;
				}

				// Handle airline selection explicitly
				if (data.startsWith("airline_")) {
					console.log("Processing airline selection:", data);
					const airline = data.replace("airline_", "");

					const currentSession = { ...ctx.session };
					currentSession.searchState = {
						...currentSession.searchState,
						airline,
					};
					currentSession.state = SearchStep.DATE_PREFERENCE;
					Object.assign(ctx, { session: currentSession });

					console.log("Updated session for airline selection:", currentSession);

					await ctx.editMessageText("üóì –ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã?", {
						reply_markup: {
							inline_keyboard: [
								[Markup.button.callback("üìÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã", "date_specific")],
								[Markup.button.callback("üìä –ì–∏–±–∫–∏–µ –¥–∞—Ç—ã", "date_flexible")],
							],
						},
					});
					await ctx.answerCbQuery();
					return;
				}

				// Handle all other callbacks through step handlers
				const handler = this.stepHandlers[ctx.session.state as SearchStep];
				if (handler) {
					console.log("Found handler for state:", ctx.session.state);
					await handler(ctx, data);
					await ctx.answerCbQuery();
				} else {
					console.log("No handler found for state:", ctx.session.state);
					await ctx.answerCbQuery();
				}
			} catch (error) {
				console.error("Error handling callback:", error);
				await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
				await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
			}

			return;
		}

		// Handle text messages
		if (ctx.message && "text" in ctx.message) {
			const handler = this.stepHandlers[ctx.session.state as SearchStep];
			if (handler) {
				await handler(ctx, ctx.message.text);
			}
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
	 */
	public async handleCalendarAction(ctx: Context): Promise<void> {
		if (!("data" in ctx.callbackQuery!)) return;

		const data = ctx.callbackQuery.data;

		if (data === "calendar_ignore") {
			await ctx.answerCbQuery();
			return;
		}

		if (data === "calendar_done") {
			await this.handleCalendarDone(ctx);
			return;
		}

		if (data.startsWith("calendar_date_")) {
			await this.handleCalendarDateSelect(ctx, data);
			return;
		}

		// Handle navigation
		if (data.startsWith("calendar_prev_") || data.startsWith("calendar_next_")) {
			try {
				const [, , year, month] = data.split("_");
				const date = new Date(Number(year), Number(month));

				// Check if date is valid using Number.isNaN instead of isNaN
				if (Number.isNaN(date.getTime())) {
					throw new TypeError("Invalid date");
				}

				const calendar = Calendar.generate(date);

				// Only update if we have a new keyboard
				if (calendar.reply_markup.inline_keyboard) {
					await ctx.editMessageReplyMarkup({
						inline_keyboard: calendar.reply_markup.inline_keyboard,
					});
				}
			} catch (error) {
				console.error("Calendar navigation error:", error);
			}

			await ctx.answerCbQuery();
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
	 *
	 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
	 * @param city - –í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
	 */
	private async handleDepartureCity(ctx: Context, city: string): Promise<void> {
		try {
			console.log("Searching airports for city:", city); // Debug log
			const airports = await this.aviasales.searchAirports(city);
			console.log("Found airports:", airports); // Debug log

			if (airports.length > 0) {
				const currentSession = { ...ctx.session };
				currentSession.searchState = {
					...currentSession.searchState,
					departureCity: city,
				};
				currentSession.state = SearchStep.DEPARTURE_AIRPORT;
				Object.assign(ctx, { session: currentSession });

				// Single message with inline keyboard
				await ctx.reply("‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞:", {
					reply_markup: {
						remove_keyboard: true,
						inline_keyboard: airports.map((airport) => [
							{
								text: `${airport.name} (${airport.iata})`,
								callback_data: `airport_${airport.iata}`,
							},
						]),
					},
				});
			} else {
				await ctx.reply("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –†–æ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", {
					reply_markup: {
						keyboard: POPULAR_CITIES_ARRAY,
						one_time_keyboard: true,
						resize_keyboard: true,
					},
				});
			}
		} catch (error) {
			console.error("Failed to search airports:", error);
			await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞.
	 *
	 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
	 * @param iata - IATA –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
	 */
	public async handleDepartureAirport(ctx: Context, iata: string): Promise<void> {
		console.log("Handling departure airport:", iata); // Debug log

		const currentSession = { ...ctx.session };
		currentSession.searchState = {
			...currentSession.searchState,
			departureAirport: iata,
		};
		currentSession.state = SearchStep.TRIP_TYPE;
		Object.assign(ctx, { session: currentSession });

		console.log("Updated session state:", currentSession.state); // Debug log

		// Replace the airport selection message with trip type selection
		await ctx.editMessageText("üõ´ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–µ–∑–¥–∫–∏:", {
			reply_markup: {
				inline_keyboard: [
					[Markup.button.callback("üîÑ –¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ", "trip_roundtrip")],
					[Markup.button.callback("‚ÜóÔ∏è –¢–æ–ª—å–∫–æ —Ç—É–¥–∞", "trip_oneway")],
				],
			},
		});
	}

	private async handleCalendarDateSelect(ctx: Context, data: string): Promise<void> {
		const [, , year, month, day] = data.split("_");
		const selectedDate = new Date(Number(year), Number(month), Number(day));

		if (ctx.session.searchState!.departureDate) {
			Object.assign(ctx.session.searchState!, { returnDate: selectedDate });
			await this.handleCalendarDone(ctx);
		} else {
			Object.assign(ctx.session.searchState!, { departureDate: selectedDate });

			if (ctx.session.searchState!.isRoundTrip) {
				await ctx.reply("üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è:", Calendar.generate(selectedDate));
			} else {
				await this.handleCalendarDone(ctx);
			}
		}

		await ctx.answerCbQuery();
	}

	private async handleCalendarDone(ctx: Context): Promise<void> {
		const state = ctx.session.searchState!;
		const departureDate = new Date(state.departureDate!);

		let summaryMessage = `
üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã:
üõ´ –í—ã–ª–µ—Ç: ${departureDate.toLocaleDateString("ru")}`;

		if (state.isRoundTrip && state.returnDate) {
			const returnDate = new Date(state.returnDate);
			summaryMessage += `
üõ¨ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: ${returnDate.toLocaleDateString("ru")}`;
		}

		summaryMessage += `
üë• –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ${state.passengerCount}
‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: ${state.airline}
${state.isDirect ? "‚úÖ –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã" : "üîÑ –° –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏"}`;

		await ctx.reply(summaryMessage);
		await ctx.reply("üîç –ò—â–µ–º –±–∏–ª–µ—Ç—ã...");
		await this.searchFlights(ctx);
	}

	private async searchFlights(ctx: Context): Promise<void> {
		try {
			const state = ctx.session.searchState!;

			const flights = await this.aviasales.searchFlights({
				origin: state.departureAirport!,
				destination: state.destinationAirport!,
				departureDate: state.departureDate!.toISOString(),
				returnDate: state.isRoundTrip ? state.returnDate!.toISOString() : undefined,
				adults: state.passengerCount!,
				direct: state.isDirect,
			});

			await this.displaySearchResults(ctx, flights);
		} catch (error) {
			console.error("Failed to search flights:", error);
			await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
		}
	}

	private async displaySearchResults(ctx: Context, flights: any[]): Promise<void> {
		if (flights.length > 0) {
			const cheapestFlight = flights[0];
			const message = `
üéâ –ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!

‚úàÔ∏è ${cheapestFlight.airline}
üí∞ –¶–µ–Ω–∞: ${cheapestFlight.price} RUB
üõ´ –í—ã–ª–µ—Ç: ${new Date(cheapestFlight.departureTime).toLocaleString("ru")}
üõ¨ –ü—Ä–∏–ª–µ—Ç: ${new Date(cheapestFlight.arrivalTime).toLocaleString("ru")}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor(cheapestFlight.duration / 60)}—á ${cheapestFlight.duration % 60}–º
${cheapestFlight.direct ? "‚úÖ –ü—Ä—è–º–æ–π —Ä–µ–π—Å" : "üîÑ –° –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏"}
		`;

			const currentSession = { ...ctx.session };
			currentSession.state = SearchStep.SEARCH_RESULTS;
			Object.assign(ctx, { session: currentSession });

			await ctx.reply(message);
			const state = ctx.session.searchState!;
			const keyboard = Markup.inlineKeyboard([
				[Markup.button.url("üé´ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", `https://aviasales.ru/search?origin_iata=${state.departureAirport}`)],
				[Markup.button.callback("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "search_tickets")],
			]);

			await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
		} else {
			await ctx.reply("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∏–ª–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
		}
	}

	// Helper method for passenger count word forms
	private getPassengerWord(count: number): string {
		const words = ["–ø–∞—Å—Å–∞–∂–∏—Ä", "–ø–∞—Å—Å–∞–∂–∏—Ä–∞", "–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"];
		const cases = [2, 0, 1, 1, 1, 2];
		const index = count % 100 > 4 && count % 100 < 20 ? 2 : cases[Math.min(count % 10, 5)];
		return words[index];
	}

	/**
	 * Handle trip type selection separately from regular message handling
	 */
	public async handleTripTypeSelection(ctx: Context): Promise<void> {
		const query = ctx.callbackQuery as CallbackQuery.DataQuery;
		if (!query?.data) return;

		console.log("Processing trip type selection:", query.data);

		try {
			const currentSession = { ...ctx.session };
			currentSession.searchState = {
				...currentSession.searchState,
				isRoundTrip: query.data === "trip_roundtrip",
			};
			currentSession.state = SearchStep.DESTINATION_CITY;
			Object.assign(ctx, { session: currentSession });

			console.log("Trip type selection complete, new state:", currentSession.state);

			// Clear the inline keyboard
			await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

			// Update the message text to confirm selection
			await ctx.editMessageText(
				`üõ´ ${query.data === "trip_roundtrip" ? "–í—ã–±—Ä–∞–Ω –ø–µ—Ä–µ–ª–µ—Ç —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ" : "–í—ã–±—Ä–∞–Ω –ø–µ—Ä–µ–ª–µ—Ç –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É"}`,
			);

			// Send the destination city selection message
			await ctx.reply("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", {
				reply_markup: {
					keyboard: POPULAR_CITIES_ARRAY,
					one_time_keyboard: true,
					resize_keyboard: true,
				},
			});
		} catch (error) {
			console.error("Error in trip type selection:", error);
			await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
		}
	}
}

export const searchCommand = new SearchCommand();
